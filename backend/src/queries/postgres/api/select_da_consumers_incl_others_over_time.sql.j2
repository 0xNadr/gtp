{#
    A query to sum the data posted (blob_size_bytes) by DA consumers and date over a certain time interval.

    Parameters:
    - days: default = 30; The time interval (in days) to consider for data extraction.
    - da_layer: The DA layer to consider for data extraction. Can also be 'all' to consider all DA layers.
    - limit: default = 7; The maximum number da consumers included in the dataset (excl "others").
#}

{% set days = days | default(7) %}
{% set limit = limit | default(7) %}
{% set da_layer = da_layer %}


-- top 7 consumers in the last 7 days (hardcoded)
with top_7 as (
	SELECT 
	    COALESCE(map.da_consumer_key, lower(f.namespace)) AS da_consumer_key, 
	    map.name, 
	    map.gtp_origin_key,  
	    SUM(value) AS data_posted
	FROM public.fact_da_consumers f
	LEFT JOIN sys_da_mapping map ON lower(f."namespace") = lower(map."namespace") 
	WHERE f.metric_key = 'blob_size_bytes'
	    AND "date" >= current_date - INTERVAL '7 days' 
	    AND "date" < current_date
	    AND f.da_layer = '{{ da_layer }}'
	GROUP BY 1,2,3
	order by 4 desc
	limit {{ limit }}
),

timeseries_data as (
	SELECT 
	    COALESCE(map.da_consumer_key, lower(f.namespace)) AS da_consumer_key, 
	    f."date",
	    SUM(value) AS data_posted
	FROM public.fact_da_consumers f
	LEFT JOIN sys_da_mapping map ON lower(f."namespace") = lower(map."namespace")
	WHERE f.metric_key = 'blob_size_bytes'
	    AND "date" >= current_date - INTERVAL '{{ days }} days' 
	    AND "date" < current_date
	    AND f.da_layer = '{{ da_layer }}'
	GROUP BY 1,2
	order by 2 desc
)

select 
	coalesce(t7.da_consumer_key, 'others') as da_consumer_key,
	ts.date,
	coalesce(t7.name, 'Others') as name,
	t7.gtp_origin_key,
	sum(ts.data_posted) as data_posted
from timeseries_data ts
left join top_7 t7 using (da_consumer_key)
group by 1,2,3,4
order by ts.date desc