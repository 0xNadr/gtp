

{% set days = days | default(7) %}
{% set limit = limit | default(10) %}

{% if da_layer == "da_ethereum_blobs" %}
    {% set metric_key = "= 'ethereum_blob_size_bytes'" %}
{% elif da_layer == "da_celestia" %}
    {% set metric_key = "= 'celestia_blob_size_bytes'" %}
{% endif %}

with econ_names as (
    SELECT 
        origin_key,
        max("name") as econ_name
    FROM sys_economics_mapping
    group by 1
),

RankedData as (
    select 
        origin_key as da_consumer_key,
        eco.econ_name as name,
        'NA' as da_layer,
        c.origin_key as gtp_origin_key,
        sum(value) as data_posted,
        RANK() OVER (ORDER BY SUM(value) DESC) AS rank
    FROM public.fact_kpis
    left join econ_names eco using (origin_key)
    left join sys_chains c using (origin_key)
    where metric_key {{ metric_key }}
    AND "date" >= current_date - INTERVAL '{{ days }} days' 
        AND "date" < current_date
    group by 1,2,3,4
    order by 5 desc
),

TopWithTotals AS (
    SELECT
        da_consumer_key,
        name,
        da_layer,
        gtp_origin_key,
        data_posted
    FROM RankedData
    WHERE rank <= {{ limit }}
    UNION ALL
    SELECT
        'others' AS da_consumer_key,
        'Others' AS name,
        NULL AS da_layer,
        NULL AS gtp_origin_key,
        SUM(data_posted) AS data_posted
    FROM RankedData
    WHERE rank > {{ limit }}
)
SELECT 
    da_consumer_key,
    name,
    da_layer,
    gtp_origin_key,
    data_posted
FROM TopWithTotals