{#
    This query inserts or updates records in the `fact_da_consumers` table by calculating the total blob fees from the `celestia_tx` table.

    ### Summary:
    - Extracts `blob_sizes` and `namespaces` from JSON columns in `celestia_tx`.
    - Calculates blob-related fees using fixed and variable fee shares.
    - Aggregates fees by date, data availability (DA) layer, and DA consumer ID.

    ### Parameters:
    - days: default = 7; Specifies the lookback period in days. Injected dynamically using Jinja2 templating.

#}

INSERT INTO fact_da_consumers (date, da_layer, da_consumer_id, metric_key, value)

with celestia_blob_transactions as (
	SELECT
	    block_timestamp,
	    fee as tx_fee,
	    gas_used,
	    blob_sizes,
	    namespaces,
	    (SELECT SUM(value::numeric)
	     FROM jsonb_array_elements(blob_sizes::jsonb) AS value) AS tx_blob_size, -- total size of all blobs in the transaction
	    jsonb_array_length(blob_sizes::jsonb) AS tx_blob_count -- total amount of blobs in the transaction
	FROM celestia_tx
	WHERE 
	    block_timestamp > date_trunc('day', now()) - interval ''{{ days | default (7) }} days' days'  -- Dynamic time interval
        AND block_timestamp < date_trunc('day', now())
        AND "action" = 'celestia.blob.v1.MsgPayForBlobs'
), 

celestia_blobs as (
	SELECT 
	    block_timestamp,
	    tx_fee,
	    (gas_used - 65000.0)/gas_used as tx_variable_cost_perc,
    	65000.0/gas_used as tx_fixed_cost_perc, -- fixed gas cost per tx is 65000
	    tx_blob_count,
	    tx_blob_size,
	    jsonb_array_elements(blob_sizes::jsonb)::numeric AS blob_size,
	    trim('"' FROM jsonb_array_elements(namespaces::jsonb)::text) AS da_consumer_id
	FROM celestia_blob_transactions
)

select
	date_trunc('day', block_timestamp) AS date,
	'da_celestia' as da_layer,
	da_consumer_id,
	'blob_fee_utia' as metric_key,
    SUM( tx_fee * ( blob_size::FLOAT/tx_blob_size::FLOAT * tx_variable_cost_perc + 1/tx_blob_count::FLOAT * tx_fixed_cost_perc ) ) as value -- fee share, split using fixed and variable cost
from celestia_blobs
GROUP BY 1,2,3,4
ORDER BY 1 DESC

ON CONFLICT (date, da_layer, da_consumer_id, metric_key)  
DO UPDATE SET 
    value = EXCLUDED.value;